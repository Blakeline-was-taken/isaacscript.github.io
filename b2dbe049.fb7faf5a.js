(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{71:function(e,t,o){"use strict";o.r(t),o.d(t,"frontMatter",(function(){return c})),o.d(t,"metadata",(function(){return r})),o.d(t,"rightToc",(function(){return i})),o.d(t,"default",(function(){return l}));var a=o(2),n=(o(0),o(211));const c={title:"Gotchas"},r={unversionedId:"gotchas",id:"gotchas",isDocsHomePage:!1,title:"Gotchas",description:'This page lists several "gotchas" - i.e. things that might be weird about IsaacScript.',source:"@site/docs/gotchas.md",slug:"/gotchas",permalink:"/docs/gotchas",editUrl:"https://github.com/IsaacScript/isaacscript.github.io/edit/main/docs/gotchas.md",version:"current",sidebar:"docs",previous:{title:"Basic JavaScript/TypeScript",permalink:"/docs/basic-javascript"},next:{title:"Function Signatures",permalink:"/docs/function-signatures"}},i=[{value:"No Operator Overloading / Vector Addition",id:"no-operator-overloading--vector-addition",children:[]},{value:"No Blank Mod Classes",id:"no-blank-mod-classes",children:[]}],s={rightToc:i};function l({components:e,...t}){return Object(n.b)("wrapper",Object(a.a)({},s,t,{components:e,mdxType:"MDXLayout"}),Object(n.b)("p",null,'This page lists several "gotchas" - i.e. things that might be weird about IsaacScript.'),Object(n.b)("br",null),Object(n.b)("h3",{id:"no-operator-overloading--vector-addition"},"No Operator Overloading / Vector Addition"),Object(n.b)("p",null,"Due to ",Object(n.b)("a",Object(a.a)({parentName:"p"},{href:"https://typescripttolua.github.io/docs/advanced/writing-declarations/#operator-overloads"}),"limitations in TypeScriptToLua"),", operator overloads will not work directly. The workaround for this is to call the methods directly."),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{className:"language-lua"}),"-- Lua code\nlocal vector = Vector(1, 1) * 5 + 2\n")),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"// TypeScript code\nconst vector = Vector(1, 1).__mul(5).__add(2)\n")),Object(n.b)("p",null,"If you are converting Lua code, make sure to account for order of operations:"),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{className:"language-lua"}),"-- Lua code\nlocal vector = Vector(1, 1) + Vector(3, 3) * 6 -- Multiplication happens before addition\n")),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"// TypeScript code\n// Do one thing at a time so that the code is clear to read\nlet vector = Vector(3, 3);\nvector = vector.__mul(6);\nvector = vector.__add(Vector(1, 1));\n")),Object(n.b)("br",null),Object(n.b)("h3",{id:"no-blank-mod-classes"},"No Blank Mod Classes"),Object(n.b)("p",null,"You cannot instantiate a blank mod object/class:"),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'const Revelations = RegisterMod("Revelations", 1) // "Revelations" has the type "Mod"\n\nclass Foo {\n  // We might not want to define a type of "Mod | null", so what if we use a blank class?\n  modObject = Mod();\n}\nconst foo = new Foo();\n\n// Later on in the code, we can overwrite it\nfoo.modObject = Revelations;\n')),Object(n.b)("p",null,"Doing this will result in an error in the following TypeScriptToLua boilerplate code:"),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{className:"language-lua"}),"function __TS__New(target, ...)\n    local instance = setmetatable({}, target.prototype) -- Error on this line\n")),Object(n.b)("p",null,"Instead, do something like the following:"),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'const Revelations = RegisterMod("Revelations", 1) // "Revelations" has the type "Mod"\n\nclass Foo {\n  modObject: Mod | null = null;\n}\nconst foo = new Foo();\n\n// Later on in the code, we can overwrite it\nfoo.modObject = Revelations;\n')))}l.isMDXComponent=!0}}]);