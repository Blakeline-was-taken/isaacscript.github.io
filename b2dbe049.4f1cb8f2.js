(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{173:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),p=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=p(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),b=a,m=u["".concat(i,".").concat(b)]||u[b]||d[b]||r;return n?o.a.createElement(m,c(c({ref:t},s),{},{components:n})):o.a.createElement(m,c({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=b;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<r;s++)i[s]=n[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},73:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return s}));var a=n(2),o=(n(0),n(173));const r={title:"Gotchas"},i={unversionedId:"gotchas",id:"gotchas",isDocsHomePage:!1,title:"Gotchas",description:'This page lists several "gotchas" or things that might be weird about IsaacScript.',source:"@site/docs/gotchas.md",slug:"/gotchas",permalink:"/docs/gotchas",editUrl:"https://github.com/IsaacScript/isaacscript.github.io/edit/main/docs/gotchas.md",version:"current",sidebar:"docs",previous:{title:"Publishing to the Workshop",permalink:"/docs/publishing-to-the-workshop"},next:{title:"Function Signatures",permalink:"/docs/function-signatures"}},c=[{value:"Extending Enums --&gt; Custom Enums",id:"extending-enums----custom-enums",children:[]},{value:"<code>int</code> and <code>float</code>",id:"int-and-float",children:[]},{value:"No Operator Overloading / Vector Addition",id:"no-operator-overloading--vector-addition",children:[]},{value:"Using JSON",id:"using-json",children:[]},{value:"NPM Dependencies",id:"npm-dependencies",children:[]},{value:"No Blank Mod Classes",id:"no-blank-mod-classes",children:[]}],l={rightToc:c};function s({components:e,...t}){return Object(o.b)("wrapper",Object(a.a)({},l,t,{components:e,mdxType:"MDXLayout"}),Object(o.b)("p",null,'This page lists several "gotchas" or things that might be weird about IsaacScript.'),Object(o.b)("br",null),Object(o.b)("h3",{id:"extending-enums----custom-enums"},"Extending Enums --\x3e Custom Enums"),Object(o.b)("p",null,"In your Lua mods, you may have extended the game's built-in enums. For example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-lua"}),'-- At the top of your Lua mod:\nCollectibleType.COLLECTIBLE_MY_CUSTOM_ITEM = Isaac.GetItemIdByName("My Custom Item")\n\n-- Elsewhere in the code:\nif (\n  player:HasCollectible(CollectibleType.COLLECTIBLE_MY_CUSTOM_ITEM)\n  and player:HasCollectible(CollectibleType.COLLECTIBLE_EPIC_FETUS)\n) then\n  -- Handle the specific synergy with My Custom Item + Epic Fetus\nend\n')),Object(o.b)("p",null,"In TypeScript, you cannot extend existing enums for safety reasons. Instead, create your own enum:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'// At the top of your TypeScript mod:\nenum CollectibleTypeCustom {\n  COLLECTIBLE_MY_CUSTOM_ITEM = Isaac.GetItemIdByName("My Custom Item"),\n}\n\n// Elsewhere in the code:\nif (\n  player.HasCollectible(CollectibleTypeCustom.COLLECTIBLE_MY_CUSTOM_ITEM)\n  && player.HasCollectible(CollectibleType.COLLECTIBLE_EPIC_FETUS)\n) {\n  // Handle the specific synergy with My Custom Item + Epic Fetus\n}\n')),Object(o.b)("p",null,"Note that you don't have to worry about polluting the global namespace: due to how the transpiler works, your enum will be local to your own project."),Object(o.b)("br",null),Object(o.b)("h3",{id:"int-and-float"},Object(o.b)("inlineCode",{parentName:"h3"},"int")," and ",Object(o.b)("inlineCode",{parentName:"h3"},"float")),Object(o.b)("p",null,"In Lua, there is only one type of number. (The programming language doesn't differentiate between integers, floats, etc.)"),Object(o.b)("p",null,"TypeScript works the same way as Lua. There is only one kind of number type: ",Object(o.b)("inlineCode",{parentName:"p"},"number"),"."),Object(o.b)("p",null,"However, the official Isaac API documentation uses integers and floats. For example, this is the entry for the ",Object(o.b)("inlineCode",{parentName:"p"},"EntityPlayer:AddCollectible()")," function:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-c++"}),"AddCollectible (CollectibleType Type, integer Charge, boolean AddConsumables)\n")),Object(o.b)("p",null,"In order to more closely match the API, the TypeScript API definitions use ",Object(o.b)("inlineCode",{parentName:"p"},"int")," and ",Object(o.b)("inlineCode",{parentName:"p"},"float")," types. Thus, the above function is declared like this:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"AddCollectible(collectibleType: int, charge: int, addConsumables: boolean): void;\n")),Object(o.b)("p",null,"If you want, you can use the ",Object(o.b)("inlineCode",{parentName:"p"},"int")," and ",Object(o.b)("inlineCode",{parentName:"p"},"float")," types in your own code too (instead of just using ",Object(o.b)("inlineCode",{parentName:"p"},"number"),", like you would in other typical TypeScript code). But if you do use ",Object(o.b)("inlineCode",{parentName:"p"},"int")," and ",Object(o.b)("inlineCode",{parentName:"p"},"float"),", be aware that they are simply aliases for ",Object(o.b)("inlineCode",{parentName:"p"},"number"),", so they don't provide any actual type safety."),Object(o.b)("p",null,"In other words, it is possible to do this, so beware:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'// Give the player a Sad Onion\nplayer.AddCollectible(CollectibleType.COLLECTIBLE_SAD_ONION, 0, false)\n\n// Find out how many Sad Onions they have\nlet numSadOnions = player.GetCollectibleNum(CollectibleType.COLLECTIBLE_SAD_ONION)\n// numSadOnions is now an "int" with a value of "1"\n\nnumSadOnions += 0.5\n// numSadOnions is still an "int", but now it has a value of "1.5"\n// This is a bug and TypeScript won\'t catch this for you!\n')),Object(o.b)("br",null),Object(o.b)("h3",{id:"no-operator-overloading--vector-addition"},"No Operator Overloading / Vector Addition"),Object(o.b)("p",null,"Due to ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://typescripttolua.github.io/docs/advanced/writing-declarations/#operator-overloads"}),"limitations in TypeScriptToLua"),", operator overloads will not work directly. The workaround for this is to call the methods directly."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-lua"}),"-- Lua code\nlocal vector = Vector(1, 1) * 5 + 2\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"// TypeScript code\nconst vector = Vector(1, 1).__mul(5).__add(2)\n")),Object(o.b)("p",null,"If you are converting Lua code, make sure to account for order of operations:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-lua"}),"-- Lua code\nlocal vector = Vector(1, 1) + Vector(3, 3) * 6 -- Multiplication happens before addition\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"// TypeScript code\n// Do one thing at a time so that the code is clear to read\nlet vector = Vector(3, 3);\nvector = vector.__mul(6);\nvector = vector.__add(Vector(1, 1));\n")),Object(o.b)("br",null),Object(o.b)("h3",{id:"using-json"},"Using JSON"),Object(o.b)("p",null,'Isaac mods are allowed to write save data to the "save1.dat", "save2.dat", and "save3.dat" files (for save slot 1, save slot 2, and save slot 3 respectively). This is accomplished via the ',Object(o.b)("inlineCode",{parentName:"p"},"Isaac.SaveModData()")," function."),Object(o.b)("p",null,"Any non-trivial mod will need to save many different variables. Since the ",Object(o.b)("inlineCode",{parentName:"p"},"Isaac.SaveModData()")," function takes a string instead of a Lua table, it is standard practice to convert a Lua table to a string using JSON. Lua functions to accomplish this are provided with the game in the ",Object(o.b)("inlineCode",{parentName:"p"},"C:\\Program Files (x86)\\Steam\\steamapps\\common\\The Binding of Isaac Rebirth\\resources\\scripts\\json.lua")," file. All you have to do is require the file:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-lua"}),'-- Lua code\nlocal json = require("json")\n\n-- Register the mod\nlocal Revelations = RegisterMod("Revelations", 1)\n\n-- Define default values for the save data\nlocal RevelationsSaveData = {\n  currentHP = 3,\n  currentNumFamiliars = 4,\n  currentCharge = 10,\n}\n\nlocal function saveModData()\n  local encodedData = json.encode(RevelationsSaveData)\n  Isaac.SaveModData(Revelations, encodedData)\nend\n')),Object(o.b)("p",null,"In TypeScript, we can directly call the Lua code in the same way. Note that IsaacScript automatically includes type definitions for the ",Object(o.b)("inlineCode",{parentName:"p"},"json.lua")," file, so you don't have to worry about that part."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'// TypeScript code\nimport * as json from "json";\n\n// Register the mod\nconst Revelations = RegisterMod("Revelations", 1);\n\n// Define default values for the save data\nconst RevelationsSaveData = {\n  currentHP = 3,\n  currentNumFamiliars = 4,\n  currentCharge = 10,\n}\n\nfunction saveModData() {\n  const encodedData = json.encode(RevelationsSaveData)\n  Isaac.SaveModData(Revelations, encodedData)\n}\n')),Object(o.b)("br",null),Object(o.b)("h3",{id:"npm-dependencies"},"NPM Dependencies"),Object(o.b)("p",null,"Currently, TypeScriptToLua does not support installing dependencies from NPM. See ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/TypeScriptToLua/TypeScriptToLua/issues/432"}),"this issue"),", which should hopefully be resolved soon. This means that it will be cumbersome to write Isaac-specific libraries for people to use."),Object(o.b)("p",null,"In the meantime, the ",Object(o.b)("inlineCode",{parentName:"p"},"create-isaacscript-mod")," tool manually bundles ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/IsaacScript/create-isaacscript-mod/blob/main/templates/static/isaacScriptInit.ts"}),"some initialization code")," in all new projects."),Object(o.b)("br",null),Object(o.b)("h3",{id:"no-blank-mod-classes"},"No Blank Mod Classes"),Object(o.b)("p",null,"You cannot instantiate a blank mod object/class:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'// TypeScript code\nconst Revelations = RegisterMod("Revelations", 1) // "Revelations" has the type "Mod"\n\nclass Foo {\n  // We might not want to define a type of "Mod | null", so what if we use a blank class?\n  modObject = Mod();\n}\nconst foo = new Foo();\n\n// Later on in the code, we can overwrite it\nfoo.modObject = Revelations;\n')),Object(o.b)("p",null,"Doing this will result in an error in the following TypeScriptToLua boilerplate code:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-lua"}),"function __TS__New(target, ...)\n    local instance = setmetatable({}, target.prototype) -- Error on this line\n")),Object(o.b)("p",null,"Instead, do something like the following:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'// TypeScript code\nconst Revelations = RegisterMod("Revelations", 1) // "Revelations" has the type "Mod"\n\nclass Foo {\n  modObject: Mod | null = null;\n}\nconst foo = new Foo();\n\n// Later on in the code, we can overwrite it\nfoo.modObject = Revelations;\n')))}s.isMDXComponent=!0}}]);