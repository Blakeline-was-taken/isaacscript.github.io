(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{71:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return l}));var n=a(2),o=(a(0),a(211));const c={title:"Gotchas"},i={unversionedId:"gotchas",id:"gotchas",isDocsHomePage:!1,title:"Gotchas",description:'This page lists several "gotchas" - i.e. things that might be weird about IsaacScript.',source:"@site/docs/gotchas.md",slug:"/gotchas",permalink:"/docs/gotchas",editUrl:"https://github.com/IsaacScript/isaacscript.github.io/edit/main/docs/gotchas.md",version:"current",sidebar:"docs",previous:{title:"Basic JavaScript/TypeScript",permalink:"/docs/basic-javascript"},next:{title:"Function Signatures",permalink:"/docs/function-signatures"}},s=[{value:"No Operator Overloading / Vector Addition",id:"no-operator-overloading--vector-addition",children:[]},{value:"Using JSON",id:"using-json",children:[]},{value:"No Blank Mod Classes",id:"no-blank-mod-classes",children:[]}],r={rightToc:s};function l({components:e,...t}){return Object(o.b)("wrapper",Object(n.a)({},r,t,{components:e,mdxType:"MDXLayout"}),Object(o.b)("p",null,'This page lists several "gotchas" - i.e. things that might be weird about IsaacScript.'),Object(o.b)("br",null),Object(o.b)("h3",{id:"no-operator-overloading--vector-addition"},"No Operator Overloading / Vector Addition"),Object(o.b)("p",null,"Due to ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://typescripttolua.github.io/docs/advanced/writing-declarations/#operator-overloads"}),"limitations in TypeScriptToLua"),", operator overloads will not work directly. The workaround for this is to call the methods directly."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-lua"}),"-- Lua code\nlocal vector = Vector(1, 1) * 5 + 2\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"// TypeScript code\nconst vector = Vector(1, 1).__mul(5).__add(2)\n")),Object(o.b)("p",null,"If you are converting Lua code, make sure to account for order of operations:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-lua"}),"-- Lua code\nlocal vector = Vector(1, 1) + Vector(3, 3) * 6 -- Multiplication happens before addition\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"// TypeScript code\n// Do one thing at a time so that the code is clear to read\nlet vector = Vector(3, 3);\nvector = vector.__mul(6);\nvector = vector.__add(Vector(1, 1));\n")),Object(o.b)("br",null),Object(o.b)("h3",{id:"using-json"},"Using JSON"),Object(o.b)("p",null,'In the Binding of Isaac, mods are allowed to write save data to the "save1.dat", "save2.dat", and "save3.dat" files (for save slot 1, save slot 2, and save slot 3 respectively). This is accomplished via the ',Object(o.b)("inlineCode",{parentName:"p"},"Isaac.SaveModData()")," function."),Object(o.b)("p",null,"Any non-trivial mod will need to save many different variables. Since the ",Object(o.b)("inlineCode",{parentName:"p"},"Isaac.SaveModData()")," function takes a string instead of a Lua table, it is standard practice to convert a Lua table to a string using JSON. Lua functions to accomplish this are provided with the game in the ",Object(o.b)("inlineCode",{parentName:"p"},"C:\\Program Files (x86)\\Steam\\steamapps\\common\\The Binding of Isaac Rebirth\\resources\\scripts\\json.lua")," file. All you have to do is require the file:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-lua"}),'-- Lua code\nlocal json = require("json")\n\n-- Register the mod\nlocal Revelations = RegisterMod("Revelations", 1)\n\n-- Define default values for the save data\nlocal RevelationsSaveData = {\n  currentHP = 3,\n  currentNumFamiliars = 4,\n  currentCharge = 10,\n}\n\nlocal function saveModData()\n  local encodedData = json.encode(RevelationsSaveData)\n  Isaac.SaveModData(Revelations, encodedData)\nend\n')),Object(o.b)("p",null,"In TypeScript, we can directly call the Lua code in the same way. Note that IsaacScript automatically includes type definitions for the ",Object(o.b)("inlineCode",{parentName:"p"},"json.lua")," file, so you don't have to worry about that part."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'// TypeScript code\nimport * as json from "json";\n\n// Register the mod\nconst Revelations = RegisterMod("Revelations", 1);\n\n// Define default values for the save data\nconst RevelationsSaveData = {\n  currentHP = 3,\n  currentNumFamiliars = 4,\n  currentCharge = 10,\n}\n\nfunction saveModData() {\n  const encodedData = json.encode(RevelationsSaveData)\n  Isaac.SaveModData(Revelations, encodedData)\n}\n')),Object(o.b)("br",null),Object(o.b)("h3",{id:"no-blank-mod-classes"},"No Blank Mod Classes"),Object(o.b)("p",null,"You cannot instantiate a blank mod object/class:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'// TypeScript code\nconst Revelations = RegisterMod("Revelations", 1) // "Revelations" has the type "Mod"\n\nclass Foo {\n  // We might not want to define a type of "Mod | null", so what if we use a blank class?\n  modObject = Mod();\n}\nconst foo = new Foo();\n\n// Later on in the code, we can overwrite it\nfoo.modObject = Revelations;\n')),Object(o.b)("p",null,"Doing this will result in an error in the following TypeScriptToLua boilerplate code:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-lua"}),"function __TS__New(target, ...)\n    local instance = setmetatable({}, target.prototype) -- Error on this line\n")),Object(o.b)("p",null,"Instead, do something like the following:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),'// TypeScript code\nconst Revelations = RegisterMod("Revelations", 1) // "Revelations" has the type "Mod"\n\nclass Foo {\n  modObject: Mod | null = null;\n}\nconst foo = new Foo();\n\n// Later on in the code, we can overwrite it\nfoo.modObject = Revelations;\n')))}l.isMDXComponent=!0}}]);